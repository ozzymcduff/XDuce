import "xml.q"
import_dtd
  (namespace = "http://www.w3.org/1999/xhtml")
  "xhtml1-transitional.dtd"

namespace = "http://www.w3.org/1999/xhtml"
  
type heading = h1 | h2 | h3 | h4 | h5 | h6
type blocktext = pre | hr | blockquote | address | center | noframes
type lists = ul | ol | dl | menu | dir
type block = p | heading | div | lists | blocktext | isindex | fieldset | table 
type misc = ins | del | script | noscript
type Block = (block | form | misc)*

type Inline = (String | inline | misc)*
type inline = a | special | fontstyle | phrase | inline_forms
type special = br | span | bdo | object | applet | img | map |iframe
type fontstyle = tt | i | b | big | small | u | s | strike | font | basefont
type phrase = em | strong | dfn | code | q | sub | sup |
              samp | kbd | var | cite | abbr | acronym
type inline_forms = input | select | textarea | label | button

fun do_body (val arg as body) : String* =
  filter arg {
    body[@.., val f as AnyElms] {
      do_Flow(f) 
    } 
  }

fun do_html (val arg as html) : String* =
  filter arg {
    html[@..,
	 val h as head,
    	 val b as body] {
      "\\documentclass{article}\n",
      do_head(h),
      "\\begin{document}\n\\maketitle\n",
      do_body(b),
      "\\end{document}\n"
    } 
  }

fun do_head (val arg as head) : String* =
  filter arg {
    head[@..,
	 AnyElms,
    	 title[@.., val t as AnyElms],
    	 AnyElms] 
    {
      "\\title{",
      strcat(t),
      "}\n\\author{}\n\\date{Auto-generated by html2latex}\n"
    } 
  }

fun strcat (val arg as String* ) : String =
  filter arg {
    val x as String, val rest { x ^ strcat(rest) }
  | () { "" }
  }

fun do_Block (val arg as Block) : String* =
  filter arg {
   ( do_block(_) 
   || AnyElm { () }
   )* 
  }

fun do_block (val arg as block) : String* =
  filter arg {
    p[@.., val i as AnyElms] { do_Inline(i) }
  | h1 { () }
  | val h as (h2 | h3 | h4 | h5 | h6) { do_heading(h) }
  | ul[@.., val l as AnyElms] { do_ul_content(l)  }
  | ol[@.., val l as AnyElms] { do_ol_content(l) }
  | dl[@.., val l as AnyElms] { do_dl_content(l) }
  | val t as table { do_table(t) }
  | val bt as blocktext { do_blocktext(bt) }
  || AnyElm { () }
  }

fun do_blocktext (val arg as blocktext) : String* =
  filter arg {
    center[@.., val f as AnyElms]  
      { "\\begin{center}\n", do_Flow(f), "\\end{center}\n" }
  | blockquote[@.., val f as AnyElms] 
      { do_Flow(f) }
  | pre[@.., val f as AnyElms] 
      { do_Flow(f) }
  || AnyElm { () }
  } 

fun do_Inline (val arg as Inline) : String* =
  filter arg {
   ( val s as String { s } 
   | do_inline(_) 
   || AnyElm { () })* 			
  }

fun do_inline (val arg as inline) : String* =
  filter arg {
    a[@.., val ac as AnyElms] { do_a_content(ac) }
  | val fs as fontstyle { do_fontstyle(fs) }
  | val p as phrase { do_phrase(p) }
  | img[@alt[val s as AnyElms], @^alt[Any]*] { strcat(s) }
  || AnyElm { () }			
  }

type a_content = (String | special | fontstyle | phrase | inline_forms | misc)*

fun do_a_content (val arg as a_content) : String* =
  filter arg {
    ( val s as String { s }
    | val i as (special | fontstyle | phrase | inline_forms) 
        { filter i { do_inline(_) } }			(* Here, we use subtyping effectively!! *)
    || AnyElm { () }
    )*
  }

fun do_heading (val arg as heading) : String* =
  filter arg {
    h1[@.., val i as AnyElms] { ("\\section{"), do_Inline(i), ("}\n") }
  | h2[@.., val i as AnyElms] { ("\\subsection{"), do_Inline(i), ("}\n") }
  | h3[@.., val i as AnyElms] { ("\\subsubsection{"), do_Inline(i), ("}\n") }
  | h4[@.., val i as AnyElms] { ("\\subsubsubsection{"), do_Inline(i), ("}\n") }
  | h5[@.., val i as AnyElms] { ("\\subsubsubsubsection{"), do_Inline(i), ("}\n") }
  | h6[@.., val i as AnyElms] { ("\\subsubsubsubsubsection{"), do_Inline(i), ("}\n") }
  }

fun do_fontstyle (val arg as fontstyle) : String* =
  filter arg {
    tt[@.., val i as AnyElms] { ("{\\tt "), do_Inline(i), ("}") }
  | i[@.., val i as AnyElms] { ("{\\it "), do_Inline(i), ("}") }
  | b[@.., val i as AnyElms] { ("{\\bf "), do_Inline(i), ("}") }
  | big[@.., val i as AnyElms] { ("{\\big "), do_Inline(i), ("}") }
  | small[@.., val i as AnyElms] { ("{\\small "), do_Inline(i), ("}") }
  | u[@.., val i as AnyElms] { do_Inline(i) }
  | s[@.., val i as AnyElms] { do_Inline(i) }
  | strike[@.., val i as AnyElms] { do_Inline(i) }
  | font[@.., val i as AnyElms] { do_Inline(i) }
  | basefont[@.., val i as AnyElms] { do_Inline(i) }
  }

fun do_phrase (val arg as phrase) : String* =
  filter arg {
    em[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  | strong[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  | dfn[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  | code[@.., val i as AnyElms] { ("{\\tt "), do_Inline(i), ("}") }
  | q[@.., val i as AnyElms] { ("{\\it "), do_Inline(i), ("}") }
  | sub[@.., val i as AnyElms] { ("\\(_{\\mbox{"), do_Inline(i), ("}}\\)") }
  | sup[@.., val i as AnyElms] { ("\\(^{\\mbox{"), do_Inline(i), ("}}\\)") }
  | samp[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  | kbd[@.., val i as AnyElms] { ("{\\tt "), do_Inline(i), ("}") }
  | var[@.., val i as AnyElms] { ("\\("), do_Inline(i), ("\\)") }
  | cite[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  | abbr[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  | acronym[@.., val i as AnyElms] { ("{\\em "), do_Inline(i), ("}") }
  }

type Flow = (String | block | form | inline | misc)*

fun do_ul_content (val arg as li+) : String* =
  "\\begin{itemize}\n", 
  do_lis(arg), 
  "\\end{itemize}\n"

fun do_ol_content (val arg as li+) : String* =
  "\\begin{enumerate}\n", 
  do_lis(arg), 
  "\\end{enumerate}\n"

fun do_lis (val arg as li+) : String* =
  filter arg {
    li[@.., val f as AnyElms] {
      ("\\item "), do_Flow(f), ("\n") }
  || li[@.., val f as AnyElms], val rest {
      ("\\item "), do_Flow(f), ("\n"), do_lis(rest) }
  }

fun do_Flow (val arg as Flow) : String* =
  filter arg { 
  ( val s as String { s } 
  | do_block(_) | do_inline(_)
  || AnyElm { () })* 
  }

fun do_dl_content (val arg as (dt|dd)+) : String* =
  "\\begin{description}\n", 
  do_ds(arg), 
  "\\end{description}\n"

fun do_dt (val arg as dt) : String* =
  filter arg {
    dt[@.., val i as AnyElms]  { do_Inline(i) }
  }
fun cat_dts (val arg as dt* ) : String* =
  filter arg { ((do_dt(_), (() { ", " }))*, do_dt(_))? }

fun do_dts (val dts as dt* ) : String* =
  filter dts {
    val dts as dt* { "\\item[", cat_dts(dts), "]" }
  }

fun do_dd (val dd as dd) : String* =
  " ", 
  filter dd {
    dd[@.., val f as AnyElms] { do_Flow(f) }
  }, 
  "\n" 

fun do_ds (val arg as (dt|dd)* ) : String* =
  filter arg { (do_dts(_), do_dd(_))*, do_dts(_) },
  "\n"
  
fun do_table (val arg as table) : String* =
  filter arg {
    table[@.., caption?,
	  (col*|colgroup* ),
          thead?,
          tfoot?,
          val t as (tbody+|tr+)] 
      { let val t = 
	filter t {
          val t1 as tbody+ { t1 }
        || val t2 { tbody[t2] }
        }
        in
        do_tbodies(colspec(tbody_maxcols(t)))(t) }
  }

fun colspec (val i as Int) : String =
  if i = 0 then "" else "l" ^ colspec(i - 1)

fun tbody_maxcols (val arg as tbody* ) : Int =
  filter arg {
    tbody[@.., val r as AnyElms], val rest 
    { let val n = tr_maxcols(r) in
      let val n' = tbody_maxcols(rest) in
      if n > n' then n else n' }
  | () { 0 }
  }

fun tr_maxcols (val arg as tr* ) : Int =
  filter arg {
    tr[@.., val c as AnyElms], val rest 
    { let val n = ncols(c) in
      let val n' = tr_maxcols(rest) in
      if n > n' then n else n' }
  | () { 0 }
  }

fun ncols (val arg as (th|td)* ) : Int =
  filter arg {
    (th | td), val rest { 1 + ncols(rest) }
  | () { 0 }
  }

fun do_tbodies (val spec as String)(val arg as tbody* ) : String* =
  filter arg {
  ( tbody[@.., val rs as AnyElms] 
    { ("\\begin{tabular}{", spec, "}\n"),	  
      do_trs(rs),
      ("\\end{tabular}\n") }
  )*
  }

fun do_tr (val arg as tr) : String* =
  filter arg {
    tr[@.., val c as AnyElms] { do_tr_content(c) }
  }

fun do_trs (val arg as tr+) : String* =
  filter arg { (do_tr(_), (() { " \\\\\n" }))*, do_tr(_) }

fun do_th_td (val arg as (th|td)) : String* =
  filter arg {
    th[@.., val f as AnyElms] 
      { "{\\bf ", do_Flow(f), "}" }
  | td[@.., val f as AnyElms] 
      { do_Flow(f) }
 }

fun do_tr_content (val arg as (th|td)+) : String* =
  filter arg { (do_th_td(_), (() { " & " }))*, do_th_td(_) }

fun main () : () =
  filter argv() {
    val infile as String, val outfile as String {
      let val file = load_xml(infile) in
      let val html = validate file with html in
      let val s = do_html(html) in
      fileout_string(outfile)(strcat(s))
    }
  || Any {
      print("Usage: <xduce-program> html2latex.q -- <input-file> <output-file>")
    }
  }

let val Any = main()


